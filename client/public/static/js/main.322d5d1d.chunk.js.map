{"version":3,"sources":["logo.jpg","components/Game.js","components/AddGame.js","components/Games.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Game","props","react_default","a","createElement","className","game","id","map","players","join","winner","name","time","AddGame","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleInputChange","bind","assertThisInitialized","handleSubmit","event","preventDefault","addGame","target","value","type","checked","setState","defineProperty","e","selectedOptions","o","onSubmit","defaultValue","onChange","multiple","setPlayers","moment","format","Component","QUERY","gql","_templateObject","Games","_Component","apply","arguments","inherits","createClass","key","console","log","react","AddGame_AddGame","react_apollo_esm","query","_ref","loading","error","data","games","client","ApolloClient","uri","App","react_router_dom","src","logo","alt","style","width","display","margin","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.322d5d1d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.63af327e.jpg\";","import React from \"react\";\n\nexport default function Game(props) {\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-1\">{props.game.id}</div>\n      <div className=\"col-md-2\">{props.game.map}</div>\n      <div className=\"col-md-2\">\n        {props.game.players.map(p => p.id).join(\", \")}\n      </div>\n      <div className=\"col-md-2\">{props.game.winner.name}</div>\n      <div className=\"col-md-2\">{props.game.time}</div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport { map } from \"lodash\";\n\nexport default class AddGame extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      map: \"\",\n      players: [],\n      winner: \"\"\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.addGame(this.state);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  setPlayers(e) {\n    this.setState({ players: map(e.target.selectedOptions, o => o.value) });\n    //console.log(this.state.players);\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <div className=\"row\">\n          <div className=\"col-md-1\">.</div>\n          <div className=\"col-md-2\">\n            <select\n              name=\"map\"\n              defaultValue={this.state.map}\n              onChange={this.handleInputChange}\n            >\n              <option>Guardian</option>\n              <option>Foundry</option>\n              <option>Isolation</option>\n            </select>\n          </div>\n          <div className=\"col-md-2\">\n            <select\n              name=\"players\"\n              multiple={true}\n              defaultValue={this.state.players}\n              //value={this.state.players}\n              onChange={this.setPlayers.bind(this)}\n            >\n              <option>klept0</option>\n              <option>booska</option>\n              <option>pinky</option>\n              <option>iKill</option>\n              <option>gypC</option>\n            </select>\n          </div>\n          <div className=\"col-md-2\">\n            <select\n              name=\"winner\"\n              defaultValue={this.state.winner}\n              onChange={this.handleInputChange}\n            >\n              <option>klept0</option>\n              <option>booska</option>\n              <option>pinky</option>\n              <option>iKill</option>\n              <option>gypC</option>\n            </select>\n          </div>\n          <div className=\"col-md-2\">\n            <input\n              type=\"text\"\n              name=\"time\"\n              defaultValue={moment().format(\"LLLL\")}\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <input type=\"submit\" value=\"Add\" />\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n","import React, { Component, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport Game from \"./Game\";\nimport AddGame from \"./AddGame\";\n\nconst QUERY = gql`\n  {\n    games {\n      id\n      map\n      time\n      players {\n        id\n        name\n        avatar\n      }\n      winner {\n        name\n      }\n    }\n  }\n`;\n\nexport class Games extends Component {\n  addGame(game) {\n    console.log(game);\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <h3 className=\"my-3\">Games</h3>\n        <div className=\"row\">\n          <div className=\"col-md-1\">ID</div>\n          <div className=\"col-md-2\">map</div>\n          <div className=\"col-md-2\">players</div>\n          <div className=\"col-md-2\">winner</div>\n          <div className=\"col-md-2\">time</div>\n        </div>\n        <AddGame addGame={this.addGame.bind(this)} />\n        <Query query={QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) console.log(error);\n            return (\n              <Fragment>\n                {data.games.map(game => (\n                  <Game key={game.id} game={game} />\n                ))}\n              </Fragment>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\nexport default Games;\n","import React, { Component } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport logo from \"./logo.jpg\";\nimport Games from \"./components/Games\";\n\nconst client = new ApolloClient({ uri: \"http://localhost:5000/graphql\" });\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"container\">\n            <img\n              src={logo}\n              alt=\"Halo Scoreboard\"\n              style={{ width: 200, display: \"block\", margin: \"auto\" }}\n            />\n            <Route exact path=\"/\" component={Games} />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}